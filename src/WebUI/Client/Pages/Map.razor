@using Cegeka.Auction.WebUI.Shared.Listings;
@page "/map"
@inject IJSRuntime JSRuntime;
@using System.Text.Json;
@using Cegeka.Auction.WebUI.Shared.Auction;
@using Cegeka.Auction.Domain.Enums;

<div id="map" style="height:500px;width:100%;"></div>
<br />
<br />
<br />
@if (Model == null) return;
<EditForm Model="@Model.QueryParams">
    <div class="d-flex justify-content-center mb-3">
        <div class="col-md-6">
            <InputText class="form-control" @bind-Value="@Model.QueryParams.Search" placeholder="Search by auction title or description" />
        </div>
    </div>
    <div class="d-flex justify-content-center">
     <div class="col-md-6">
            <div class="input-group">
                <InputNumber TValue="decimal?" class="form-control" style="margin-right: 1rem" @bind-Value="@Model.QueryParams.MinPrice" placeholder="Min-Price" />
                <InputNumber TValue="decimal?" class="form-control" @bind-Value="@Model.QueryParams.MaxPrice" placeholder="Max-Price" />
                <InputSelect class="mx-3" @bind-Value="@Model.QueryParams.Category">
                    @foreach (var category in Categories)
                    {
                        <option value="@category">@(@category == 0 ? "Category" : category.ToString())</option>
                    }
                </InputSelect>
                <button class="btn btn-primary" type="submit" @onclick="GetListings"> <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Inject]
    public IListingsClient ListingsClient { get; set; } = null!;
    public Category[] Categories = (Category[])Enum.GetValues(typeof(Category));


    public ListingsVM? Model { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initialize", null);
            LoadAllAuctions();
            StateHasChanged();
        }
    }
    public async Task GetListings()
    {
        await JSRuntime.InvokeVoidAsync("initialize", null);
        Model = await ListingsClient.PostListingsAsync(Model?.QueryParams);
        AddMarkers();
        Console.WriteLine(Model.Auctions.Count);

        StateHasChanged();
    }

    public async void Add(AuctionItemDTO auction)
    {
        await JSRuntime.InvokeVoidAsync("addMarker", JsonSerializer.Serialize(auction));
        StateHasChanged();
    }
    public async void LoadAllAuctions()
    {
        Model = await ListingsClient.PostListingsAsync(new ListingsQueryParams());
        AddMarkers();
    }
    public void AddMarkers()
    {
        
        if (Model != null)
        {
            foreach (var auction in Model.Auctions)
            {

                if (auction != null && auction?.Lat != null && auction?.Lon != null)
                {
                    Add(auction);
                    
                }
            }
        }
    }
}
